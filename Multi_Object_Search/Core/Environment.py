'''
    Created by awandzel on 10/30/18.
'''

import numpy as np
import Multi_Object_Search.Pomdp.OOState.Location as Loc

#Environment Constants
E = EMPTY = -1
W = WALL = -2
X = ROOMCENTER = -3
Y = MAPCENTER = -4
U = UNCERTAIN = -5

#Rotate maps so as to be vertically readable
def rotateToRight(m):
    t = np.zeros([len(m), len(m[0])])
    for x in range(len(m)):
        for y in range(len(m[0])):
            t[x][y] = m[len(m) - y - 1][x]
    return t

def rotateToLeft(m):
    t = np.zeros([len(m), len(m[0])])
    for x in range(len(m)):
        for y in range(len(m[0])):
            t[len(m) - 1 - x][len(m) - 1 - y] = m[len(m) - 1 - y][x]
    return t

def selectMap(mapRef):
    if mapRef == "small":
        return environmentMaps(mapRef, smallOccupancy, smallSemantic)
    else:
        raise Exception("Error: Map not found")

# ////////////////////////////////////////////////////
#//////////////////// MAPS ///////////////////////////
# ////////////////////////////////////////////////////
class environmentMaps():
    numberOfUncertainLocations = 0

    def __init__(self, mapRef, occupancy, semantic):
        self.name = mapRef
        self.occupancyMap = rotateToRight(occupancy)
        self.semanticMap = rotateToRight(semantic)
        self.beliefMap = np.zeros([len(semantic), len(semantic[0])])

        # builds map of all uncertain locations = spaces in rooms (excluding mapcenter)
        for x in range(len(semantic)):
            for y in range(len(semantic[x])):
                if semantic[x][y] > EMPTY and occupancy[x][y] != MAPCENTER:
                    self.numberOfUncertainLocations += 1
                    self.beliefMap[x][y] = UNCERTAIN

    def sampleObjectLocations(self, objectDistributions, objectRn, numberOfObjects):
        return [self.sampleObjectLocation(objectDistributions[o], objectRn) for o in range(numberOfObjects)]

    def sampleObjectLocation(self, objectDistribution, objectRn):
        curSum = 0.
        roll = objectRn.random()
        for l in objectDistribution:
            curSum += objectDistribution[l]
            if (roll <= curSum):
                return Loc.Location(l.x,l.y)
        raise Exception("Probabilities don't sum to 1.0: " + str(curSum))


    def extractObjectLocations(self, numberOfObjects):
        Objects = {}
        for x in range(len(self.occupancyMap)):
            for y in range(len(self.occupancyMap[x])):
                if self.occupancyMap[x][y] > EMPTY:
                    objectId = self.occupancyMap[x][y]
                    if objectId in Objects: raise Exception("No duplicate objects allowed")
                    Objects[objectId] = Loc.Location(x,y)

        for obj in Objects:
            if obj > len(Objects): raise Exception("Objects must be sequentially specified")
        if numberOfObjects != len(Objects): raise Exception("Number of objects must match what is on map")

        return [Objects[l] for l in sorted(Objects.keys())]

    def debugPrint(self):
        print("=========Maps=========")
        print("Number of uncertain Locations: " + str(self.numberOfUncertainLocations))
        print("\nOccupancy Map: \n", np.matrix(rotateToLeft(self.occupancyMap)))
        print("\nSemantic Map: \n", np.matrix(rotateToLeft(self.semanticMap)))
        print("\nBelief Map: \n", np.matrix(rotateToLeft(self.beliefMap)))

# ////////////////////////////////////////////////////
#//////////////////// ROOMS //////////////////////////
# ////////////////////////////////////////////////////
class roomsInMap():
    numberOfRooms = 0
    transitionMatrix = {}
    agentToRoomMapping = {}
    roomToLocationsMapping = {}
    adjacencyMatrix = [[]]

    # maps room number to center
    def setTransitionMatrix(self, Maps):
        for x in range(len(Maps.occupancyMap)):
            for y in range(len(Maps.occupancyMap[x])):
                if (Maps.occupancyMap[x][y] == ROOMCENTER or Maps.occupancyMap[x][y] == MAPCENTER):
                    self.transitionMatrix[Maps.semanticMap[x][y]] = Loc.Location(x, y)

        self.numberOfRooms = len(self.transitionMatrix) - 1 #exclude center

    # room adjacency graph
    def setAdjacencyMatrix(self, Maps):
        if Maps.name == "small":
            self.adjacencyMatrix = [
                [False, True, False, True, True],
                [True, False, True, False, True],
                [False, True, False, True, True],
                [True, False, True, False, True],
                [True, True, True, True, False],
            ]

    # mapping from rooms to locations and locations to rooms
    def setMappings(self, Maps):
        for x in range(len(Maps.semanticMap)):
            for y in range(len(Maps.semanticMap[x])):
                if Maps.semanticMap[x][y] > EMPTY:
                    self.agentToRoomMapping[Loc.Location(x,y)] = Maps.semanticMap[x][y]
                    if Maps.semanticMap[x][y] not in self.roomToLocationsMapping:
                        self.roomToLocationsMapping[Maps.semanticMap[x][y]] = []
                    self.roomToLocationsMapping[Maps.semanticMap[x][y]].append(Loc.Location(x, y))

    # returns rooms connected to #index room
    def connectedRooms(self, index):
        connected = []
        index = int(index)
        for i in range(len(self.adjacencyMatrix[index])):
            if self.adjacencyMatrix[index][i]:
                connected.append(i)
        return connected

    def debugPrint(self):
        print("=========Rooms=========")
        for i in range(self.numberOfRooms):
            connected = self.connectedRooms(i)
            print("\nRoom" + str(i) + " center: " + str(self.transitionMatrix[i]) +
                  "\nRoom" + str(i) + " is connected to:")
            for j in connected:
                print(" " + str(j), end= " ")
        print("\n")

# ////////////////////////////////////////////////////
#//////////////////// MAPS ///////////////////////////
# ////////////////////////////////////////////////////
smallOccupancy = [
          [E, E, E, E, E, E, E, E, E, E, E],
          [E, X, E, E, E, E, E, E, E, X, E],
          [E, E, E, W, W, W, W, W, E, E, E],
          [E, E, W, W, W, W, W, W, W, E, E],
          [E, E, W, W, W, W, W, W, W, E, E],
          [E, E, W, W, W, Y, W, W, W, E, E],
          [E, E, W, W, W, W, W, W, W, E, E],
          [E, E, W, W, W, W, W, W, W, E, E],
          [E, E, 1, W, W, W, W, W, E, E, E],
          [E, X, 0, E, E, E, E, E, E, X, E],
          [E, E, E, E, E, E, E, E, E, E, E],
  ]
smallSemantic = [
          [1, 1, 1, E, E, E, E, E, 2, 2, 2],
          [1, 1, 1, E, E, E, E, E, 2, 2, 2],
          [1, 1, 1, W, W, W, W, W, 2, 2, 2],
          [E, E, W, W, W, W, W, W, W, E, E],
          [E, E, W, W, W, W, W, W, W, E, E],
          [E, E, W, W, W, 4, W, W, W, E, E],
          [E, E, W, W, W, W, W, W, W, E, E],
          [E, E, W, W, W, W, W, W, W, E, E],
          [0, 0, 0, W, W, W, W, W, 3, 3, 3],
          [0, 0, 0, E, E, E, E, E, 3, 3, 3],
          [0, 0, 0, E, E, E, E, E, 3, 3, 3],
  ]

'''
Original domains from paper
  public static int[][] robotDomain = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, 0, 0, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W},
          {0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, 0, 0, W, W, W, 0, 0, 0, W},
          {0, X, 0, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, W, W, 0, 0, X, 0, W},
          {0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W},
          {0, 0, 0, W, W, W, 0, 0, Y, 0, W, W, W, 0, 0, 0, W, 0, 0, W},
          {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, W, W, W, W, W, W},
          {W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, W, W, W, W, W, W},
          {W, W, 0, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };
  public static int[][] roomsInRobotDomain = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, 2, 2, 2, 2, 0, W, W, W, W, W, W, W, W, W, W, W},
          {1, 1, 1, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, W, W, W, 5, 5, 5, W},
          {1, 1, 1, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, W, W, 0, 5, 5, 5, W},
          {1, 1, 1, W, 2, 2, 2, 2, 0, 3, 3, 3, 3, W, 0, 0, 5, 5, 5, W},
          {1, 1, 1, W, W, W, 0, 0, 6, 0, W, W, W, 0, 0, W, W, 0, 0, W},
          {1, 1, 1, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, W, W, W, W, W, W},
          {W, W, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, W, W, W, W, W, W, W, W},
          {W, W, 0, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };
  
    public static int[][] A = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, W, W, 0, 0, 0, X, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Y, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W},
          {W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W},
          {W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W},
          {W, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, X, 0, 0, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, W, W, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, W, W, 0, 0, 0, X, 0, 0, 0, W, W, 0, 0, 0, X, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, X, 0, 0, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };

  public static int[][] roomsInA = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, W, 2, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, W, 2, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, W, 2, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, W, 2, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W},
          {W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W},
          {W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W},
          {W, 8, 8, 8, 8, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, 0, 0, 4, 4, 4, 4, 4, 4, W},
          {W, 8, 8, 8, 8, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, 0, 0, 4, 4, 4, 4, 4, 4, W},
          {W, 8, 8, 8, 8, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, 8, 8, 8, 8, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, 0, 0, W, W, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, 0, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, 0, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, W, 5, 5, 5, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };

  public static int[][] B = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, X, 0, 0, 0, W, W, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 5, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, X, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, Y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, W, W, W, W, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, 0, 0, W, W, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, W, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, W, 0, 7, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, X, 0, 0, 0, W, W, 0, 0, 0, 0, W, 0, 0, 0, 0, W, W, 0, 0, 6, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, X, 0, W, 0, X, 0, 0, W, W, 0, 0, 0, 0, X, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, W, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, W, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };

  public static int[][] roomsInB = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, 1, 1, 1, 1, 1, 1, 1, W, W, 0, 0, 0, W, W, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W},
          {W, 8, 8, 8, 8, 8, 8, 8, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 3, 3, 3, 3, 3, 3, W},
          {W, 8, 8, 8, 8, 8, 8, 8, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 3, 3, 3, 3, 3, 3, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, W, W, W, W, W, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, 0, 0, W, W, W, W, W, W, W},
          {W, 7, 7, 7, 7, 7, 7, 7, W, W, 6, 6, 6, 6, W, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, 7, 7, 7, W, W, 6, 6, 6, 6, W, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, 7, 7, 7, W, W, 6, 6, 6, 6, W, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, 7, 7, 7, W, W, 6, 6, 6, 6, W, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, 7, 7, 7, W, W, 6, 6, 6, 6, W, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, 4, 4, W},
          {W, 7, 7, 7, 7, 7, 7, 7, W, W, 6, 6, 6, 6, W, 5, 5, 5, 5, W, W, 4, 4, 4, 4, 4, 4, 4, 4, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };


  //2L, 2M, 3S
    public static int[][] C = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W, W, W, 0, 0, 0, X, 0, 0, W},
          {W, W, W, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W, W, W, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, 0, 0, 0, 0, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, 0, 0, 0, 0, W, W, W, W, W, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, W, W, W, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, X, 0, 0, 0, 0, W, 0, Y, 0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, W, W, W, W, W, W, W, W, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };


  public static int[][] roomsInC = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, 2, 2, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, W, W, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, W, W, 0, 0, W, W, W, W, W, W, W, W, W, W, W, W, 0, 0, W, W, W, W, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, 0, 0, 0, 0, W, W, W, W, W, W, W, W, W, W},
          {W, W, W, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, 0, 0, 0, 0, W, W, W, W, W, W, W, W, W, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 8, W, 0, 0, 0, W, 4, 4, 4, 4, 4, 4, 4, W, W, W, W, W, W, W, W, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 8, W, 0, 0, 0, W, 4, 4, 4, 4, 4, 4, 4, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 8, W, 0, 0, 0, W, 4, 4, 4, 4, 4, 4, 4, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 8, W, 0, 9, 0, W, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 8, W, 0, 0, 0, W, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 8, W, 0, 0, 0, W, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, 8, 8, W, 0, 0, 0, W, 4, 4, 4, 4, 4, 4, 4, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, W, W, W, W, W, W, W, W, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, W, W, W, W, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, W, W, 0, 0, 0, W, W, W, W, 0, 0, 0, W, W, W, W, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 7, 7, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 7, 7, 7, 7, 7, 7, 7, 7, 0, 6, 6, 6, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 7, 7, 7, 7, 7, 7, 7, 7, 0, 6, 6, 6, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 7, 7, 7, 7, 7, 7, 7, 7, 0, 6, 6, 6, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 7, 7, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 7, 7, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };

  public static int[][] D = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, X, 0, 0, 0, 0, W, 0, 0, X, 0, 0, W, W, W, 0, 0, W, W, W, W, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, W, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, W},
          {W, W, W, 0, 0, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W},
          {W, W, W, 0, 0, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, 0, 0, W, W, W, W},
          {W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, 0, 0, W, W, W, W},
          {W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, X, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, W, 0, 0, X, 0, 0, 0, 0, 0, 0, 0, X, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, W, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };


  public static int[][] roomsInD = new int[][]{
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, W, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, W, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, W, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, W, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, W, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, W, W, W, 0, 0, W, W, W, W, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, W, 4, 4, 4, 4, 4, 4, 4, W, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, W, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, W, 3, 3, 3, 3, W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, W, 4, 4, 4, 4, 4, 4, 4, W, 3, 3, 3, 3,W},
          {W, 1, 1, 1, 1, 1, 1, 1, 1, 1, W, 2, 2, 2, 2, 2, W, 4, 4, 4, 4, 4, 4, 4, W, 3, 3, 3, 3,W},
          {W, W, W, 0, 0, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W},
          {W, W, W, 0, 0, 0, 0, W, W, W, W, W, 0, 0, 0, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, W},
          {W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, 0, 0, W, W, W, W},
          {W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, 0, 0, W, W, W, W, W, W, 0, 0, W, W, W, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, 8, 8, 8, 8, 8, 8, W, 7, 7, 7, 7, 7, 7, W, 6, 6, 6, 6, 6, 6, W, 5, 5, 5, 5, 5, 5, 5, W},
          {W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W},
  };
}
'''



